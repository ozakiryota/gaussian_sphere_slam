<launch>
	<!-- global rosparam -->
	<param name="use_sim_time" value="true"/>

	<!-- rviz -->
	<node pkg="rviz" type="rviz" name="rviz" args="-d /home/amsl/.rviz/wall_ekf_slam.rviz"/>

	<!-- sensor driver -->
	<include file="$(find velodyne_pointcloud)/launch/32e_points.launch"/>
	<node pkg="pose_estimation_walls" name="odom_republish_infant" type="odom_republish_infant"/>

	<!-- proposed method -->
	<node pkg="gyrodometry" name="initial_alignment" type="initial_alignment" output="screen">
		<param name="initial_orientation_is_0001" type="bool" value="true"/>
	</node>
	<node pkg="gaussian_sphere_slam" name="wall_ekf_slam" type="wall_ekf_slam" output="screen"/>

	<!-- comparisons -->
	<node pkg="gyrodometry" name="gyrodometry3d" type="gyrodometry3d" output="screen">
		<remap from="/odom" to="/tinypower/odom/republished"/>
	</node>
	<include file="$(find loam_velodyne)/launch/hector_loam_velodyne.launch"/>
	<node pkg="msg_conversion" type="odometry_zxy_to_xyz" name="odometry_zxy_to_xyz">
		<remap from="/odom" to="/integrated_to_init"/>
		<remap from="/odom/change_axis" to="/loamvelodyne_odometry"/>
	</node>

	<!-- for visualize trajectory -->
	<node pkg="msg_conversion" type="posestamped_to_odometry" name="posestamped_to_odometry">
		<remap from="/pose" to="/wall_ekf_slam/pose"/>
		<remap from="/odom/from_posestamped" to="/wall_ekf_slam/odom"/>
		<param name="child_frame_id" type="string" value="/wall_ekf_slam/odom"/>
	</node>
</launch>
